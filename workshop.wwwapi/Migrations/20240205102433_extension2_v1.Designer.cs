// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using workshop.wwwapi.Data;

#nullable disable

namespace workshop.wwwapi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240205102433_extension2_v1")]
    partial class extension2_v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("workshop.wwwapi.Models.JunctionTable.PrescriptionMedicine", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("instructions");

                    b.HasKey("PrescriptionId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("prescription_medicine");

                    b.HasData(
                        new
                        {
                            PrescriptionId = 1,
                            MedicineId = 1,
                            Amount = 42,
                            Instructions = "One dose each morning for 3 weeks."
                        },
                        new
                        {
                            PrescriptionId = 1,
                            MedicineId = 2,
                            Amount = 28,
                            Instructions = "2 pills each day for 2 weeks."
                        },
                        new
                        {
                            PrescriptionId = 2,
                            MedicineId = 3,
                            Amount = 10,
                            Instructions = "5 pills each day for 2 days."
                        },
                        new
                        {
                            PrescriptionId = 4,
                            MedicineId = 1,
                            Amount = 10,
                            Instructions = "One dose each morning for 10 days."
                        },
                        new
                        {
                            PrescriptionId = 3,
                            MedicineId = 1,
                            Amount = 10,
                            Instructions = "One dose each morning for 10 days."
                        },
                        new
                        {
                            PrescriptionId = 3,
                            MedicineId = 2,
                            Amount = 28,
                            Instructions = "2 pills each day for 2 weeks."
                        },
                        new
                        {
                            PrescriptionId = 3,
                            MedicineId = 3,
                            Amount = 10,
                            Instructions = "5 pills each day for 2 days."
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<int>("appointmentType")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_type");

                    b.Property<DateTime>("Booking")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking_time");

                    b.HasKey("Id", "DoctorId", "PatientId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            PatientId = 1,
                            AppointmentType = 0,
                            Booking = new DateTime(2010, 3, 5, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            PatientId = 1,
                            AppointmentType = 0,
                            Booking = new DateTime(2012, 3, 5, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 1,
                            PatientId = 5,
                            AppointmentType = 0,
                            Booking = new DateTime(2005, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 1,
                            PatientId = 5,
                            AppointmentType = 0,
                            Booking = new DateTime(2007, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 1,
                            PatientId = 5,
                            AppointmentType = 0,
                            Booking = new DateTime(2009, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            DoctorId = 3,
                            PatientId = 5,
                            AppointmentType = 0,
                            Booking = new DateTime(1995, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(123)
                        .HasColumnType("character varying(123)")
                        .HasColumnName("full_name");

                    b.HasKey("Id");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Jan Itor"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Dr. Acula"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("medicine");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vitalysol"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Zypherexa"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pheonixal"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(123)
                        .HasColumnType("character varying(123)")
                        .HasColumnName("full_name");

                    b.HasKey("Id");

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            FullName = "John Doe"
                        },
                        new
                        {
                            Id = 1,
                            FullName = "Jimmy Bob"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("AppointmentId", "DoctorId", "PatientId");

                    b.ToTable("prescription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 2,
                            DoctorId = 1,
                            Name = "Preventative care",
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 6,
                            DoctorId = 3,
                            Name = "Cure Infection",
                            PatientId = 5
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            DoctorId = 1,
                            Name = "Cure cancer",
                            PatientId = 5
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 5,
                            DoctorId = 1,
                            Name = "Cure cancer",
                            PatientId = 5
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.JunctionTable.PrescriptionMedicine", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.PureModels.Medicine", "Medicine")
                        .WithMany("PrescriptionMedicine")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.PureModels.Prescription", "Prescription")
                        .WithMany("PrescriptionMedicine")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.Appointment", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.PureModels.doctor", "doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.PureModels.patient", "patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.Prescription", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.PureModels.doctor", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.PureModels.patient", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.PureModels.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId", "DoctorId", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.Medicine", b =>
                {
                    b.Navigation("PrescriptionMedicine");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PureModels.Prescription", b =>
                {
                    b.Navigation("PrescriptionMedicine");
                });
#pragma warning restore 612, 618
        }
    }
}
