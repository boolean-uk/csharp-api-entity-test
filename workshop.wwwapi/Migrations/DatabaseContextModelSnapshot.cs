// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using workshop.wwwapi.Data;

#nullable disable

namespace workshop.wwwapi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("workshop.wwwapi.Models.Appointment", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctorid");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patientid");

                    b.Property<DateTime>("Booking")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("appointmenttype");

                    b.HasKey("DoctorId", "PatientId", "Booking");

                    b.HasIndex("PatientId");

                    b.ToTable("appointment");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            PatientId = 1,
                            Booking = new DateTime(2024, 1, 11, 11, 0, 0, 0, DateTimeKind.Utc),
                            Type = 0
                        },
                        new
                        {
                            DoctorId = 1,
                            PatientId = 1,
                            Booking = new DateTime(2024, 2, 2, 14, 0, 0, 0, DateTimeKind.Utc),
                            Type = 0
                        },
                        new
                        {
                            DoctorId = 2,
                            PatientId = 2,
                            Booking = new DateTime(2024, 1, 17, 13, 0, 0, 0, DateTimeKind.Utc),
                            Type = 0
                        },
                        new
                        {
                            DoctorId = 1,
                            PatientId = 3,
                            Booking = new DateTime(2024, 5, 29, 13, 0, 0, 0, DateTimeKind.Utc),
                            Type = 0
                        },
                        new
                        {
                            DoctorId = 3,
                            PatientId = 2,
                            Booking = new DateTime(2024, 1, 6, 12, 0, 0, 0, DateTimeKind.Utc),
                            Type = 0
                        },
                        new
                        {
                            DoctorId = 1,
                            PatientId = 4,
                            Booking = new DateTime(2024, 3, 13, 10, 0, 0, 0, DateTimeKind.Utc),
                            Type = 0
                        },
                        new
                        {
                            DoctorId = 2,
                            PatientId = 5,
                            Booking = new DateTime(2024, 2, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Type = 0
                        },
                        new
                        {
                            DoctorId = 3,
                            PatientId = 6,
                            Booking = new DateTime(2024, 4, 15, 8, 0, 0, 0, DateTimeKind.Utc),
                            Type = 0
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.HasKey("Id");

                    b.ToTable("doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Ulf Liljenberg"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Phillip McGraw"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Ken Jeong"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.HasKey("Id");

                    b.ToTable("patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Elias Soprani"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Olga Alm"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Oskar Damkilde"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Gabriel Letell"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Samuel Vacha"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Theodor Johansson"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Appointment", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
