// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using workshop.wwwapi.Data;

#nullable disable

namespace workshop.wwwapi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240212171213_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("workshop.wwwapi.Models.AppointmentModels.Appointment", b =>
                {
                    b.Property<DateTime>("Booking")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Booking", "DoctorId", "PatientId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Booking = new DateTime(2024, 3, 8, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9753),
                            DoctorId = 5,
                            PatientId = 5,
                            Type = 0
                        },
                        new
                        {
                            Booking = new DateTime(2024, 2, 29, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9766),
                            DoctorId = 4,
                            PatientId = 2,
                            Type = 0
                        },
                        new
                        {
                            Booking = new DateTime(2024, 3, 6, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9767),
                            DoctorId = 4,
                            PatientId = 8,
                            Type = 1
                        },
                        new
                        {
                            Booking = new DateTime(2024, 2, 24, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9768),
                            DoctorId = 5,
                            PatientId = 9,
                            Type = 0
                        },
                        new
                        {
                            Booking = new DateTime(2024, 3, 4, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9768),
                            DoctorId = 3,
                            PatientId = 6,
                            Type = 1
                        },
                        new
                        {
                            Booking = new DateTime(2024, 2, 20, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9769),
                            DoctorId = 5,
                            PatientId = 5,
                            Type = 1
                        },
                        new
                        {
                            Booking = new DateTime(2024, 3, 6, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9770),
                            DoctorId = 1,
                            PatientId = 8,
                            Type = 1
                        },
                        new
                        {
                            Booking = new DateTime(2024, 3, 8, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9771),
                            DoctorId = 5,
                            PatientId = 8,
                            Type = 1
                        },
                        new
                        {
                            Booking = new DateTime(2024, 3, 5, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9771),
                            DoctorId = 5,
                            PatientId = 10,
                            Type = 0
                        },
                        new
                        {
                            Booking = new DateTime(2024, 3, 12, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9772),
                            DoctorId = 2,
                            PatientId = 6,
                            Type = 0
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.DoctorModels.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.HasKey("Id");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Charles Jagger"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Elvis Windsor"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Elvis Winfrey"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Donald Winfrey"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Audrey Presley"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.MedicineModels.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MedicineId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            MedicineId = 1,
                            Name = "Amoxicillin"
                        },
                        new
                        {
                            MedicineId = 2,
                            Name = "Ibuprofen"
                        },
                        new
                        {
                            MedicineId = 3,
                            Name = "Paracetamol"
                        },
                        new
                        {
                            MedicineId = 4,
                            Name = "Ciprofloxacin"
                        },
                        new
                        {
                            MedicineId = 5,
                            Name = "Azithromycin"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PatientModels.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.HasKey("Id");

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Charles Trump"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Mick Hepburn"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Kate Presley"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Jimi Presley"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Elvis Obama"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Kate Windsor"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "Kate Presley"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "Elvis Windsor"
                        },
                        new
                        {
                            Id = 9,
                            FullName = "Audrey Hendrix"
                        },
                        new
                        {
                            Id = 10,
                            FullName = "Oprah Presley"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PrescriptionMedicineModels.PrescriptionMedicine", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PrescriptionId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("PrescriptionMedicine");

                    b.HasData(
                        new
                        {
                            PrescriptionId = 1,
                            MedicineId = 2,
                            Notes = "Take once daily",
                            Quantity = 2
                        },
                        new
                        {
                            PrescriptionId = 1,
                            MedicineId = 5,
                            Notes = "Take once daily",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 1,
                            MedicineId = 1,
                            Notes = "Take once daily",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 2,
                            MedicineId = 4,
                            Notes = "Take once daily",
                            Quantity = 4
                        },
                        new
                        {
                            PrescriptionId = 2,
                            MedicineId = 2,
                            Notes = "Take once daily",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 3,
                            MedicineId = 2,
                            Notes = "Take once daily",
                            Quantity = 2
                        },
                        new
                        {
                            PrescriptionId = 3,
                            MedicineId = 5,
                            Notes = "Take once daily",
                            Quantity = 2
                        },
                        new
                        {
                            PrescriptionId = 3,
                            MedicineId = 1,
                            Notes = "Take once daily",
                            Quantity = 2
                        },
                        new
                        {
                            PrescriptionId = 4,
                            MedicineId = 5,
                            Notes = "Take once daily",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 5,
                            MedicineId = 4,
                            Notes = "Take once daily",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 5,
                            MedicineId = 3,
                            Notes = "Take once daily",
                            Quantity = 3
                        },
                        new
                        {
                            PrescriptionId = 6,
                            MedicineId = 3,
                            Notes = "Take once daily",
                            Quantity = 2
                        },
                        new
                        {
                            PrescriptionId = 6,
                            MedicineId = 2,
                            Notes = "Take once daily",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 7,
                            MedicineId = 1,
                            Notes = "Take once daily",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 8,
                            MedicineId = 4,
                            Notes = "Take once daily",
                            Quantity = 4
                        },
                        new
                        {
                            PrescriptionId = 9,
                            MedicineId = 5,
                            Notes = "Take once daily",
                            Quantity = 3
                        },
                        new
                        {
                            PrescriptionId = 9,
                            MedicineId = 1,
                            Notes = "Take once daily",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 10,
                            MedicineId = 3,
                            Notes = "Take once daily",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PrescriptionModels.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PrescriptionId"));

                    b.Property<DateTime>("AppointmentBooking")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AppointmentDoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentPatientId")
                        .HasColumnType("integer");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("AppointmentBooking", "AppointmentDoctorId", "AppointmentPatientId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            PrescriptionId = 1,
                            AppointmentBooking = new DateTime(2024, 3, 8, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9753),
                            AppointmentDoctorId = 5,
                            AppointmentPatientId = 5
                        },
                        new
                        {
                            PrescriptionId = 2,
                            AppointmentBooking = new DateTime(2024, 2, 29, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9766),
                            AppointmentDoctorId = 4,
                            AppointmentPatientId = 2
                        },
                        new
                        {
                            PrescriptionId = 3,
                            AppointmentBooking = new DateTime(2024, 3, 6, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9767),
                            AppointmentDoctorId = 4,
                            AppointmentPatientId = 8
                        },
                        new
                        {
                            PrescriptionId = 4,
                            AppointmentBooking = new DateTime(2024, 2, 24, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9768),
                            AppointmentDoctorId = 5,
                            AppointmentPatientId = 9
                        },
                        new
                        {
                            PrescriptionId = 5,
                            AppointmentBooking = new DateTime(2024, 3, 4, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9768),
                            AppointmentDoctorId = 3,
                            AppointmentPatientId = 6
                        },
                        new
                        {
                            PrescriptionId = 6,
                            AppointmentBooking = new DateTime(2024, 2, 20, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9769),
                            AppointmentDoctorId = 5,
                            AppointmentPatientId = 5
                        },
                        new
                        {
                            PrescriptionId = 7,
                            AppointmentBooking = new DateTime(2024, 3, 6, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9770),
                            AppointmentDoctorId = 1,
                            AppointmentPatientId = 8
                        },
                        new
                        {
                            PrescriptionId = 8,
                            AppointmentBooking = new DateTime(2024, 3, 8, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9771),
                            AppointmentDoctorId = 5,
                            AppointmentPatientId = 8
                        },
                        new
                        {
                            PrescriptionId = 9,
                            AppointmentBooking = new DateTime(2024, 3, 5, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9771),
                            AppointmentDoctorId = 5,
                            AppointmentPatientId = 10
                        },
                        new
                        {
                            PrescriptionId = 10,
                            AppointmentBooking = new DateTime(2024, 3, 12, 17, 12, 13, 475, DateTimeKind.Utc).AddTicks(9772),
                            AppointmentDoctorId = 2,
                            AppointmentPatientId = 6
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.AppointmentModels.Appointment", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.DoctorModels.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.PatientModels.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PrescriptionMedicineModels.PrescriptionMedicine", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.MedicineModels.Medicine", "Medicine")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.PrescriptionModels.Prescription", "Prescription")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PrescriptionModels.Prescription", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.AppointmentModels.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentBooking", "AppointmentDoctorId", "AppointmentPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.AppointmentModels.Appointment", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.DoctorModels.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.MedicineModels.Medicine", b =>
                {
                    b.Navigation("PrescriptionMedicines");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PatientModels.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PrescriptionModels.Prescription", b =>
                {
                    b.Navigation("PrescriptionMedicines");
                });
#pragma warning restore 612, 618
        }
    }
}
