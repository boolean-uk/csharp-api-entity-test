// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using workshop.wwwapi.Data;

#nullable disable

namespace workshop.wwwapi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240906141338_thirdMigration")]
    partial class thirdMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("workshop.wwwapi.Models.Appointment", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patientId");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctorId");

                    b.Property<DateTime>("Booking")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("PatientId", "DoctorId", "Booking")
                        .HasName("PK_AppointmentDocPatientBooking");

                    b.HasIndex("DoctorId");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            DoctorId = 3,
                            Booking = new DateTime(2025, 1, 12, 17, 21, 30, 176, DateTimeKind.Local).AddTicks(7484),
                            Id = 1
                        },
                        new
                        {
                            PatientId = 2,
                            DoctorId = 1,
                            Booking = new DateTime(2024, 11, 24, 11, 11, 14, 176, DateTimeKind.Local).AddTicks(7565),
                            Id = 2
                        },
                        new
                        {
                            PatientId = 3,
                            DoctorId = 2,
                            Booking = new DateTime(2025, 3, 12, 12, 57, 9, 176, DateTimeKind.Local).AddTicks(7569),
                            Id = 3
                        },
                        new
                        {
                            PatientId = 4,
                            DoctorId = 2,
                            Booking = new DateTime(2024, 10, 12, 23, 7, 44, 176, DateTimeKind.Local).AddTicks(7576),
                            Id = 4
                        },
                        new
                        {
                            PatientId = 5,
                            DoctorId = 6,
                            Booking = new DateTime(2025, 3, 18, 10, 54, 33, 176, DateTimeKind.Local).AddTicks(7584),
                            Id = 5
                        },
                        new
                        {
                            PatientId = 6,
                            DoctorId = 3,
                            Booking = new DateTime(2025, 3, 22, 4, 49, 13, 176, DateTimeKind.Local).AddTicks(7608),
                            Id = 6
                        },
                        new
                        {
                            PatientId = 7,
                            DoctorId = 8,
                            Booking = new DateTime(2025, 2, 21, 16, 37, 34, 176, DateTimeKind.Local).AddTicks(7611),
                            Id = 7
                        },
                        new
                        {
                            PatientId = 8,
                            DoctorId = 2,
                            Booking = new DateTime(2024, 11, 28, 14, 23, 27, 176, DateTimeKind.Local).AddTicks(7614),
                            Id = 8
                        },
                        new
                        {
                            PatientId = 9,
                            DoctorId = 10,
                            Booking = new DateTime(2024, 9, 28, 12, 45, 27, 176, DateTimeKind.Local).AddTicks(7618),
                            Id = 9
                        },
                        new
                        {
                            PatientId = 10,
                            DoctorId = 4,
                            Booking = new DateTime(2025, 9, 4, 21, 9, 5, 176, DateTimeKind.Local).AddTicks(7621),
                            Id = 10
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullName");

                    b.HasKey("Id");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "ArnoldSchwarzenegger"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "NeoPresley"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "NeoSchwarzenegger"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "AdamXavier"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "ElvisWinslow"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "FelixMouse"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "ElvisAndersson"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "AdamLothbrok"
                        },
                        new
                        {
                            Id = 9,
                            FullName = "ElvisWinslow"
                        },
                        new
                        {
                            Id = 10,
                            FullName = "FelixAndersson"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullName");

                    b.HasKey("Id");

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "BarackMouse"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "RagnarDuck"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "OprahLothbrok"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "MickeySchwarzenegger"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "ElvisSchwarzenegger"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "ElvisAndersson"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "NeoSandler"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "OprahSchwarzenegger"
                        },
                        new
                        {
                            Id = 9,
                            FullName = "AdamObama"
                        },
                        new
                        {
                            Id = 10,
                            FullName = "CharlesObama"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Appointment", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
